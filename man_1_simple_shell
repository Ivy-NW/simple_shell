.TH man 1  "Version 1.0" "Simple Shell"
.SH NAME
hsh \- Marcus's  & Ivy's Simple Shell
.SH SYNOPSIS
.B hsh
[command_string]
.SH DESCRIPTION
.B hsh
is a command language interpreter that executes commands read from the standard input or from a file.
.LP
.B hsh
is intended to be a conformant implementation of the Shell and Utilities portion of the IEEE POSIX specification (IEEE Standard 1003.1).
.B hsh
can be configured to be POSIX-conformatn by default.
.LP
.B RETURN VALUE
Upon successful return, these functions return the contents of specified directories.
.SH OPTIONS
.TP
.B \-i
If the
.B -i
option is present, the shell is
.I interactive.
.SH ARGUMENTS
The first argument is assumed to be the name of a file containing shell commands. If
.B hsh
is invoked in this fashion, $0 is set to the name of the file, and the positional parameters are set to the remaining arguments.
.B hsh
reads and executes commands from this file, then exits. The exit status of
.B hsh
is the exit status of the last command executed in the script. If no commands are executed, the exit status is 0. An attempt is first made to open the file in the current directory, and, if no file is found, then the shell searches the directories in
.B PATH
for the script.
.SH INVOCATION
A
.I login shell
is one whose first character of argument zero is a -.
.LP
How
.B hsh
executes its startup files: when
.B hsh
is invoked as an interactive login shell, it first reads and executes commands from the file
.I /etc/profile,
if that file exists. After reading that file, it looks for
.I ~/.hsh_profile, ~/.hsh_login, and ~/.profile,
in that order, and reads and executes commands from the first one that exists and is readable.
.LP
When a login shell exits,
.B hsh
reads and executes commands from the file
.I ~/.hsh_logout,
if it exists.
When
.B hsh
is started non-interactively, to run a shell script, for example, it looks for the variable
.B ENVIRON
in the environment, expands its value if it appears there, and uses the expanded value as the name of a file to read and execute.
.SH DEFINITIONS
.TP
.B blank
A space or tab.
.TP
.B word
A sequence of characters considered as a single unit by the shell. Also known as a
.B token.
.SH SHELL GRAMMAR
.B Simple Commands
A
.I simple command
is a sequence of optional variable assignments followed by
.B blank
-separated words and redirections, and terminated by a
.I control operator.
The first word specifies the command to be executed, and is passed as argument zero. The remaining words are passed as arguments to the invoked command.
.LP
The return value of a
.I simple command
is its exit status, or 128+n if the command is terminated by signal n.
.SH FUNCTIONS
A shell function, defined as described above under
.B SHELL GRAMMAR
stores a series of commands for later execution. When the name of a shell function is used as a simple command name, the list of commands associated with that function name is executed. Functions are executed in the context of the current shell; no new process is created to interpret them (contrast this with the execution of a shell script). When a function is executed, the arguments to the function become the positional parameters during its execution.
.SH SIMPLE COMMAND EXPANSION
.PP
When a simple command is executed, the shell performs the following expansions, assignments, and redirections, from left to right.
.TP
1.
The words that the parser has marked as variable assignments (those preceding the command name) and redirections are saved for later processing.
.TP
2.
The words that are not variable assignments or redirections are expanded. If any words remain after expansion, the first word is taken to be the name of the command and the remaining words are the arguments.
.TP
If no command name results, the variable assignments affect the current shell environment. Otherwise, the variables are added to the environment of the executed command and do not affect the current shell environment. If any of the assignments attempts to assign a value to a read-only variable, an error occurs, and the command exits with a non-zero status.
.SH COMMAND EXECUTION
After a command has been split into words, if it results in a simple command and an optional list of arguments, the following actions are taken.
.PP
If the command name contains no slashes, the shell attempts to locate it. If there exists a shell function by that name, that function is invoked as described above in
.B FUNCTIONS.
If the name does not match a function, the shell searches for it in the list of shell builtins. If a match is found, that builtin is invoked.
.PP
If the name is neither a shell function nor a builtin, and contains no slashes,
.B hsh
searches each element of the
.B PATH
for a directory containing an executable file by that name.
.B hsh
uses a hash table to remember the full pathnames of executable files. A full search of the directories in
.B PATH
is performed only if the command is not found in the hash table.
.SH COMMAND EXECUTION ENVIRONMENT
The shell has an
.I execution environment,
which consists of the following:
.IP \(bu
open files inherited by the shell at invocation, as modified by redirections supplied to the
.B exec
builtin
.IP \(bu
the current working as set by
.B cd, pushd, or popd,
or inherited by the shell at invocation
.IP \(bu
the file creation mode mask as set by
.B umask
or inherited from the shell's parent
.IP \(bu
current traps set by
.B trap
.IP \(bu
shell parameters that are set by variable assignment or with
.B set
or inherited from the shell's parent in the environment
.IP \(bu
shell functions defined during execution or inherited from the shell's parent in the environment
.IP \(bu
options enabled at invocation (either by default or with command-line arguments) or by
.B set
.IP \(bu
options enabled by
.B shopt
.IP \(bu
shell aliases defined with
.B alias
.IP \(bu
various process IDs, including those of background jobs, the value of
.B $$,
and the value of
.B PPID
.SH ENVIRONMENT
When a program is invoked it is given an array of strings called the
.I environment.
This is a list of
.I name-value
pairs, of the form
.I name=value.
.PP
The shell provides several ways to manipulate the environment. On invocation, the shell scans its own environment and creates a parameter for each name found, automatically marking it for
.I export
to child processes. Executed commands inherit the environment.
.SH EXIT STATUS
The exit status of an executed command is the value returned by the
.I waitpid
system call or equivalent function. Exit statuses fall between 0 and 255, though, as explained below, the shell may use values above 125 specially. Exit statuses from shell builtins and compound commands are also limited to this range. Under certain circumstances, the shell will use special values to indicate specific failure modes.
.PP
For the shell's purposes, a command which exits with a zero exit status has succeeded. An exit status of zero indicates success. A non-zero exit status indicates failure. When a command terminates on a fatal signal
.I N,
.B hsh
uses the value of
.I 128+N
as the exit status.
.PP
If a command is not found, the child process created to execute it returns a status of 127. If a command is found but is not executable, the return status is 126.
.SH SIGNALS
.SH PROMPTING
When executing interactively,
.B hsh
displays the primary prompt
.B PS1
when it is ready to read a command, and the secondary prompt
.B PS2
when it needs more input to complete a command.
.SH SEE ALSO
.I Bash
.SH BUGS
No known bugs.
.SH AUTHORS
Ivy Wambui and Marcus Ngángá
